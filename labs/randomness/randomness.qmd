---
title: "Data and Randomness"
author: "Bio Data Science^3"
date: "July 19 - August 2, 2025"
format: 
  html:
    toc: true 
    code-fold: false
    code-tools: true
    embed-resources: true
    highlight-style: github
    code-line-numbers: false 
params:
  skip_execution: false
  skip_answers: true
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

## Introduction

In this document, we'll explore how randomness and sample design inform
statistical estimation, in particular what behavior we can expect from
estimators for things like the mean and variance.

Using simulations, we will:

- generate samples from a known distribution (here the Normal)
- estimate the mean of the distribution from samples of different size
- compute the variance of these estimators and compare to aspects of the study
  (sample size) and the data (its mean and variance)

## Key functions

First I want to review two basic R functions, `lapply` and `sapply`:

```{r}
my_list <- list(1, 1:5, 1:10)
names(my_list) <- letters[1:3]
lapply(X = my_list, FUN = \(x) 2 * x)
sapply(X = my_list, FUN = \(x) sum(x)) # reduce to vector/array
sapply(X = my_list, FUN = \(x) c(sum=sum(x), prod=prod(x))) # reduce to vector/array
```

Also `replicate`:

```{r}
replicate(n=5, expr = { rnorm(1) * 10 + 3 })
```

## Build a simulator

Ok, now we will use R's `rnorm()` function to simulate random samples from a
Normal distribution with the two parameters `mean` and `sd`. Suppose we are
interested in estimating the mean of the distribution.


```{r}
set.seed(5)
n_values <- c(5, 10, 50, 100, 1000)
true_mean <- 5
true_sd <- 1
est_means <- sapply(n_values, \(n) {
  mean( rnorm(n, mean = true_mean, sd = true_sd) )
})
data.frame(n = n_values, est_means)
```

## Estimating location (mean)

### Across sample size

```{r}
simulate_estimating_means <- \(n, nreps, mean, sd) {
  replicate(nreps, {
    mean( rnorm(n=n, mean=mean, sd=sd) )
  })
}
```

```{r}
nreps <- 1000
est_means <- lapply(
  n_values,
  simulate_estimating_means,
  nreps=nreps,
  mean=true_mean,
  sd=true_sd
)
```

```{r box_means_by_n}
names(est_means) <- paste0("n=", n_values)
boxplot(est_means)
```

```{r density_means_by_n}
library(tibble)
library(ggplot2)
dat <- tibble(
  est_means = unlist(est_means),
  n = factor(rep(n_values, each=nreps))
)
ggplot(dat, aes(x = est_means, fill=n, color=n)) +
  geom_density(alpha=.1)
```

```{r plot_var_means_by_n}
(mean_of_means <- sapply(est_means, mean))
(var_of_means <- sapply(est_means, var))
plot(n_values, var_of_means, type="b", log="xy")
# theoretical variance:
points(n_values, 1/n_values, type="b", col="blue")
```

### Across variance of the data

```{r}
simulate_estimating_means_2 <- \(var, nreps, n, mean) {
  replicate(nreps, {
    mean(rnorm(n=n, mean=mean, sd=sqrt(var)))
  })
}
```

```{r}
var_values <- 1:5
est_means <- lapply(
  var_values,
  simulate_estimating_means_2,
  nreps=nreps,
  n = 1000,
  mean=true_mean
)
```

```{r box_means_by_var}
names(est_means) <- paste0("var=", var_values)
boxplot(est_means)
```

```{r plot_var_means_by_var}
(mean_of_means <- sapply(est_means, mean))
(var_of_means <- sapply(est_means, var))
plot(var_values, var_of_means, type="b")
# theoretical variance:
points(var_values, 1/1000 * var_values, type="b", col="blue")
```

### Detection (power)

```{r}
# is mean greater than a number?
n_values <- c(2,5,1:10*10)
est_means <- lapply(
  n_values,
  simulate_estimating_means,
  nreps=nreps,
  mean=true_mean,
  sd=true_sd
)
```

```{r plot_detected_by_n}
(detected <- sapply(est_means, \(x) mean(x > 4.75)))
plot(n_values, detected, type="b")
```

## Estimating spread (variance)

```{r}
simulate_estimating_vars <- \(n, nreps, mean, sd) {
  replicate(nreps, {
    var( rnorm(n=n, mean=mean, sd=sd) )
  })
}
```

```{r}
true_sd <- 2
n_values <- c(3, 5, 10, 50, 100)
est_vars <- lapply(
  n_values,
  simulate_estimating_vars,
  nreps=nreps,
  mean=true_mean,
  sd=true_sd
)
```

```{r box_vars_by_n}
names(est_vars) <- paste0("n=", n_values)
boxplot(est_vars)
```

```{r}
(mean_of_vars <- sapply(est_vars, mean))
(var_of_vars <- sapply(est_vars, var))
plot(n_values, var_of_vars, type="b", log="xy")
# theoretical variance:
points(n_values, 2 * true_sd^4 / (n_values - 1), type="b", col="blue")
```

## Sources of "error"

### Analysis of variance

### Error is just residual variance

